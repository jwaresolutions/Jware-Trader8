/**
 * Strategy configuration and execution interfaces for Jware-Trader8
 */

import { OHLCV } from './data';
import { OrderSide } from './trading';

/**
 * Trade signal types
 */
export type SignalType = 'BUY' | 'SELL' | 'HOLD';

/**
 * Risk management rule types
 */
export type RiskRuleType = 'STOP_LOSS' | 'TAKE_PROFIT' | 'MAX_DRAWDOWN' | 'POSITION_SIZE';

/**
 * Indicator parameter types
 */
export type IndicatorParameter = string | number | boolean;

/**
 * Technical indicator configuration
 */
export interface IndicatorConfig {
  /** Indicator name/identifier */
  name: string;
  /** Indicator type (SMA, EMA, RSI, etc.) */
  type: string;
  /** Indicator parameters */
  parameters: Record<string, IndicatorParameter>;
  /** Period for the indicator */
  period?: number;
  /** Source data field (close, high, low, etc.) */
  source?: 'open' | 'high' | 'low' | 'close' | 'volume';
}

/**
 * Signal condition for buy/sell triggers
 */
export interface SignalCondition {
  /** Unique condition identifier */
  id: string;
  /** Human-readable condition description */
  description: string;
  /** Condition expression (e.g., "sma_fast > sma_slow") */
  condition: string;
  /** Action to take when condition is met */
  action: SignalType;
  /** Priority level (higher number = higher priority) */
  priority?: number;
  /** Whether this condition is required vs optional */
  required?: boolean;
}

/**
 * Risk management configuration
 */
export interface RiskConfig {
  /** Maximum position size as percentage of capital */
  maxPositionSize: number;
  /** Stop loss percentage */
  stopLoss?: number;
  /** Take profit percentage */
  takeProfit?: number;
  /** Maximum drawdown percentage */
  maxDrawdown?: number;
  /** Maximum number of concurrent positions */
  maxPositions?: number;
  /** Minimum time between trades (in minutes) */
  minTimeBetweenTrades?: number;
  /** Risk per trade as percentage of capital */
  riskPerTrade?: number;
}

/**
 * Strategy parameters
 */
export interface StrategyParameters {
  /** Trading symbol */
  symbol: string;
  /** Position size configuration */
  positionSize: number;
  /** Timeframe for analysis */
  timeframe: string;
  /** Additional custom parameters */
  [key: string]: IndicatorParameter;
}

/**
 * Complete strategy configuration
 */
export interface StrategyConfig {
  /** Strategy name */
  name: string;
  /** Strategy description */
  description?: string;
  /** Strategy version */
  version?: string;
  /** Strategy parameters */
  parameters: StrategyParameters;
  /** Technical indicators used */
  indicators: IndicatorConfig[];
  /** Buy/sell signal conditions */
  signals: {
    /** Buy signal conditions */
    buy: SignalCondition[];
    /** Sell signal conditions */
    sell: SignalCondition[];
  };
  /** Risk management rules */
  riskManagement: RiskConfig;
  /** Strategy metadata */
  metadata?: {
    /** Strategy author */
    author?: string;
    /** Creation date */
    createdAt?: Date;
    /** Last modified date */
    updatedAt?: Date;
    /** Strategy tags */
    tags?: string[];
  };
}

/**
 * Trade signal generated by strategy
 */
export interface TradeSignal {
  /** Signal type */
  type: SignalType;
  /** Trading symbol */
  symbol: string;
  /** Signal price */
  price: number;
  /** Signal timestamp */
  timestamp: Date;
  /** Recommended position size */
  quantity?: number;
  /** Signal strength (0-1) */
  strength?: number;
  /** Signal reason/description */
  reason: string;
  /** Strategy that generated the signal */
  strategyName: string;
  /** Metadata about the signal */
  metadata?: Record<string, any>;
}

/**
 * Strategy validation result
 */
export interface ValidationResult {
  /** Whether the strategy is valid */
  isValid: boolean;
  /** Validation errors */
  errors: ValidationError[];
  /** Validation warnings */
  warnings: ValidationWarning[];
}

/**
 * Validation error
 */
export interface ValidationError {
  /** Error code */
  code: string;
  /** Error message */
  message: string;
  /** Field that caused the error */
  field?: string;
  /** Error severity */
  severity: 'ERROR' | 'WARNING';
}

/**
 * Validation warning
 */
export interface ValidationWarning {
  /** Warning code */
  code: string;
  /** Warning message */
  message: string;
  /** Field that caused the warning */
  field?: string;
}

/**
 * Strategy execution context
 */
export interface StrategyContext {
  /** Current market data */
  currentData: OHLCV;
  /** Historical market data */
  historicalData: OHLCV[];
  /** Current indicator values */
  indicators: Map<string, number | null>;
  /** Strategy configuration */
  config: StrategyConfig;
  /** Current timestamp */
  timestamp: Date;
}

/**
 * Strategy performance metrics
 */
export interface StrategyMetrics {
  /** Total return percentage */
  totalReturn: number;
  /** Sharpe ratio */
  sharpeRatio: number;
  /** Maximum drawdown percentage */
  maxDrawdown: number;
  /** Win rate percentage */
  winRate: number;
  /** Total number of trades */
  totalTrades: number;
  /** Number of profitable trades */
  profitableTrades: number;
  /** Average trade return */
  averageReturn: number;
  /** Profit factor */
  profitFactor: number;
  /** Volatility */
  volatility: number;
}

/**
 * Compiled strategy ready for execution
 */
export interface CompiledStrategy {
  /** Original configuration */
  config: StrategyConfig;
  /** Compiled indicators */
  indicators: Map<string, any>;
  /** Compiled signal conditions */
  buyConditions: CompiledCondition[];
  /** Compiled sell conditions */
  sellConditions: CompiledCondition[];
  /** Strategy metadata */
  metadata: {
    /** Compilation timestamp */
    compiledAt: Date;
    /** Compiler version */
    compilerVersion: string;
  };
}

/**
 * Compiled condition for efficient execution
 */
export interface CompiledCondition {
  /** Original condition */
  original: SignalCondition;
  /** Compiled expression function */
  evaluate: (context: StrategyContext) => boolean;
  /** Required indicators */
  requiredIndicators: string[];
}